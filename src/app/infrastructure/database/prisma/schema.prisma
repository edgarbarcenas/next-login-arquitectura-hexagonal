generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ASSISTANT
  USER
}

enum PaymentStatus {
  PAID
  PENDING
  REJECTED
  NOT_PAID
}

enum AppointmentStatus {
  CONFIRMED
  CANCELED
  PENDING
}

model User {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(120)
  email       String     @unique @db.VarChar(120)
  password    String     @db.VarChar(120)
  phone       String?    @db.VarChar(20)
  role        Role       @default(USER)
  image       String?    @db.VarChar(255)
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  appointments Appointment[]
  blockedHours BlockedHour[]
  services    UserService[]

  @@map("users")
}

model UserService {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  service     String    @db.VarChar(120)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("user_services")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(120)
  description String    @db.Text
  price       Decimal
  slug        String    @unique @db.VarChar(120)
  image       String?   @db.VarChar(255)
  icon        String?   @db.VarChar(120)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  appointments Appointment[]

  @@map("products")
}

model Bill {
  id          Int            @id @default(autoincrement())
  appointmentId Int          @unique
  appointment  Appointment   @relation(fields: [appointmentId], references: [id])
  paymentMethod String       @db.VarChar(50)
  transactionCode String     @db.VarChar(50)
  status      PaymentStatus  @default(PENDING)
  amount      Decimal
  lastDigits  String?        @db.VarChar(4)
  paymentDate DateTime?      
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("bills")
}

model Appointment {
  id          Int                 @id @default(autoincrement())
  userId      Int?
  user        User?               @relation(fields: [userId], references: [id])
  productId   Int
  product     Product             @relation(fields: [productId], references: [id])
  clientId    Int
  client      Client              @relation(fields: [clientId], references: [id])
  petId       Int
  pet         Pet                 @relation(fields: [petId], references: [id])
  address     String?             @db.VarChar(255)
  date        DateTime
  hour        String              @db.VarChar(5)
  status      AppointmentStatus   @default(PENDING)
  paymentStatus PaymentStatus     @default(NOT_PAID)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  clientRecords ClientRecord[]
  bill        Bill?

  @@map("appointments")
}

model Client {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(120)
  email       String     @unique @db.VarChar(120)
  phone       String?    @db.VarChar(20)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  appointments Appointment[]
  pets        Pet[]

  @@map("clients")
}

model Pet {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(120)
  breed       String?    @db.VarChar(120)
  age         Int?
  weight      Decimal?
  diet        String?    @db.Text
  sterilized  Boolean    @default(false)
  gender      String?    @db.VarChar(20)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  clientId    Int
  client      Client     @relation(fields: [clientId], references: [id])
  appointments Appointment[]

  @@map("pets")
}

model ClientRecord {
  id          Int         @id @default(autoincrement())
  appointmentId Int       @unique
  appointment  Appointment @relation(fields: [appointmentId], references: [id])
  notes       String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("client_records")
}

model BlockedHour {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  date        DateTime
  hour        String    @db.VarChar(5)
  blocked     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("blocked_hours")
}

model Country {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(120)
  code        String     @db.VarChar(10)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("countries")
}
